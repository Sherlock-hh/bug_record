rgb_nv12Y=np.array([[0.299],[0.587],[0.114]],dtype=float)
rgb_nv12U=np.array([[-0.172],[-0.339],[0.511]],dtype=float)
rgb_nv12V=np.array([[0.511],[-0.428],[-0.083]],dtype=float)
nv12_rgbfnp=np.array([[1,0,1.371],
                     [1,-0.336,-0.698],
                     [1,1.732,0]],dtype=float)
nv12_rgbfnp=nv12_rgbfnp.transpose()
nv12_rgbb_np=np.array([diffr,diffg,diffb],dtype=float)

def rgb_to_nv12_np(x):
    rgb = x
    h=rgb.shape[0]
    w=rgb.shape[1]

    added=128/255.

    #计算y分量
    rgb_info=np.reshape(rgb,[-1,3])
    y_info=np.matmul(rgb_info,rgb_nv12Y)
    y=np.reshape(y_info,[h,w,1])

    #计算uv分量 rgb下采样至0.5h,0.5w
    rgb_yuv=cv.resize(rgb,(h//2,w//2),interpolation=cv.INTER_NEAREST)
    rgb_yuv_info=np.reshape(rgb_yuv,[-1,3])
    u_info=np.matmul(rgb_yuv_info,rgb_nv12U)+added
    v_info=np.matmul(rgb_yuv_info,rgb_nv12V)+added
    uv=np.concatenate([u_info,v_info],axis=1)
    uv=np.reshape(uv,[h//2,w,1])

    #拼接yuv分量
    yuv=np.concatenate([y,uv],axis=0)

    return yuv
#改成tensor的
def nv12_to_rgb_np(x):

    yuv=x

    hyuv=yuv.shape[0]
    w=yuv.shape[1]
    hrgb=int(hyuv/1.5)

    y=yuv[:hrgb,:,:]
    #把uv分量扩展到从(0.5h,w,1)变成(h,w,2)
    uv=yuv[hrgb:,:,:]
    #先把uv分开
    uv=np.reshape(uv,[-1,2])
    u=uv[:,:1]
    v = uv[:, 1:]
    u=np.reshape(u,[hrgb//2,w//2,1])
    v=np.reshape(v,[hrgb//2,w//2,1])

    u_e=cv.resize(u,(hrgb,w),interpolation=cv.INTER_LINEAR)
    v_e=cv.resize(v,(hrgb,w),interpolation=cv.INTER_LINEAR)
    u_e=u_e[:,:,np.newaxis]
    v_e=v_e[:,:,np.newaxis]
    yuv_3=np.concatenate([y,u_e,v_e],axis=2)
    yuv_3=np.reshape(yuv_3,[-1,3])
    rgb_3=np.matmul(yuv_3,nv12_rgbfnp)+nv12_rgbb_np
    rgb=np.reshape(rgb_3,[hrgb,w,3])
    rgb=rgb/rgb.max()
    return rgb,u_e,v_e,yuv_3